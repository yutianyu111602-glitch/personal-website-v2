爽！我在**不改变你的对外接口**（`EmotionMonitorProps` 不变）的前提下，把组件升级成更“AI 控制台”的质感：发光边框、扫描线、霓虹网格、能量火花、实时迷你曲线、BPM/预设徽章、主题自适应、以及**低开销**的动画（尽量用 CSS + SVG + RAF 批量刷新）。你可以直接替换同名组件使用。

```tsx
import React, { useEffect, useMemo, useRef, useState } from 'react';
import { motion, useMotionValue, useSpring } from 'motion/react';

/**
 * EmotionMonitor —— PRO 版（酷炫 + 低开销）
 * - 不改 props：className / language / isVisible / onToggleVisibility
 * - 事件：继续监听 UnifiedEventBus 的
 *   - global:config（拿 theme.intensity/motion/contrast）
 *   - automix:mood（energy/valence/arousal）
 *   - bpm:update（bpm 值）
 *   - visualization:preset（当前背景/预设名）
 * - 视觉：全银色太空风 + 霓虹边框 + 扫描线 + 网格 + 粒子点阵 + 小型实时曲线
 * - 性能：SVG 曲线 + CSS 动画；RAF 里只做轻量 push（数组滚动窗口）
 */

export interface EmotionData {
  energy: number;
  valence: number;
  arousal: number;
  intensity: number;
  motion: number;
  contrast: number;
  timestamp: number;
}

export interface EmotionMonitorProps {
  className?: string;
  language?: string;
  isVisible?: boolean;
  onToggleVisibility?: () => void;
}

export const EmotionMonitor: React.FC<EmotionMonitorProps> = ({
  className = '',
  language = 'zh',
  isVisible = true,
  onToggleVisibility
}) => {
  // —— 状态
  const [emotionData, setEmotionData] = useState<EmotionData>({
    energy: 0.6, valence: 0.0, arousal: 0.5,
    intensity: 0.6, motion: 0.55, contrast: 0.5,
    timestamp: Date.now()
  });
  const [updateCount, setUpdateCount] = useState(0);
  const [preset, setPreset] = useState<string>('cosmic_silver');
  const [bpm, setBpm] = useState<number>(126);

  // —— 迷你曲线缓存（固定长度环形缓冲，避免频繁分配）
  const HISTORY = 64;
  const energyHist = useRef<number[]>(Array(HISTORY).fill(0.6));
  const arousalHist = useRef<number[]>(Array(HISTORY).fill(0.5));
  const ptr = useRef(0);

  // —— 软化数值（弹簧），让 UI 更丝滑
  const mvEnergy = useMotionValue(emotionData.energy);
  const mvArousal = useMotionValue(emotionData.arousal);
  const mvValence = useMotionValue(emotionData.valence);
  const sEnergy = useSpring(mvEnergy, { stiffness: 120, damping: 18 });
  const sArousal = useSpring(mvArousal, { stiffness: 120, damping: 18 });
  const sValence = useSpring(mvValence, { stiffness: 120, damping: 18 });

  // —— 事件订阅
  useEffect(() => {
    const g: any = window as any;
    const bus = g.UnifiedEventBus;

    const onTheme = (event: any) => {
      const t = event?.data?.theme;
      if (!t) return;
      setEmotionData(prev => ({
        ...prev,
        intensity: clamp01(t.intensity ?? prev.intensity),
        motion: clamp01(t.motion ?? prev.motion),
        contrast: clamp01(t.contrast ?? prev.contrast),
        timestamp: Date.now()
      }));
      setUpdateCount(u => u + 1);
    };

    const onMood = (event: any) => {
      const mood = event?.data?.mood;
      if (!mood) return;
      const next = {
        energy: clamp01(mood.energy ?? emotionData.energy),
        valence: clampRange(mood.valence ?? emotionData.valence, -1, 1),
        arousal: clamp01(mood.arousal ?? emotionData.arousal)
      };
      setEmotionData(prev => ({ ...prev, ...next, timestamp: Date.now() }));
      setUpdateCount(u => u + 1);
      mvEnergy.set(next.energy);
      mvValence.set(next.valence);
      mvArousal.set(next.arousal);
    };

    const onBpm = (event: any) => {
      const v = event?.data?.bpm;
      if (typeof v === 'number' && Number.isFinite(v)) {
        setBpm(v);
        // 微调 energy（同你原来的策略，但做轻度融合）
        const eBpm = clamp01((v - 90) / 60);
        const blended = clamp01(0.7 * eBpm + 0.3 * emotionData.energy);
        setEmotionData(prev => ({ ...prev, energy: blended, timestamp: Date.now() }));
        setUpdateCount(u => u + 1);
        mvEnergy.set(blended);
      }
    };

    const onPreset = (event: any) => {
      const name = event?.data?.name || event?.data || '';
      if (name) setPreset(String(name));
    };

    if (bus?.on) {
      const u1 = bus.on('global', 'config', onTheme);
      const u2 = bus.on('automix', 'mood', onMood);
      const u3 = bus.on('bpm', 'update', onBpm);
      const u4 = bus.on('visualization', 'preset', onPreset);
      return () => { u1&&u1(); u2&&u2(); u3&&u3(); u4&&u4(); };
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // —— RAF：把弹簧值推入历史，驱动曲线（单一 RAF，低开销）
  useEffect(() => {
    let raf = 0;
    const loop = () => {
      raf = requestAnimationFrame(loop);
      const e = clamp01(sEnergy.get());
      const a = clamp01(sArousal.get());
      ptr.current = (ptr.current + 1) % HISTORY;
      energyHist.current[ptr.current] = e;
      arousalHist.current[ptr.current] = a;
    };
    raf = requestAnimationFrame(loop);
    return () => cancelAnimationFrame(raf);
  }, [sEnergy, sArousal]);

  // —— 生成迷你曲线折线（后 64 个点）
  const { energyPath, arousalPath } = useMemo(() => {
    const w = 280, h = 46, pad = 4;
    const dx = (w - pad * 2) / (HISTORY - 1);
    const makePath = (arr: number[]) => {
      const pts: string[] = [];
      for (let i = 0; i < HISTORY; i++) {
        const idx = (ptr.current + 1 + i) % HISTORY; // 从最旧到最新
        const x = pad + i * dx;
        const y = pad + (1 - arr[idx]) * (h - pad * 2);
        pts.push(`${x.toFixed(2)},${y.toFixed(2)}`);
      }
      return pts.join(' ');
    };
    return {
      energyPath: makePath(energyHist.current),
      arousalPath: makePath(arousalHist.current),
    };
  }, [updateCount]); // 更新计数变化时重算（足够稀疏）

  if (!isVisible) return null;

  // —— 动态色（银色太空主题基底 + AI 荧光）
  const accent = '#a0b8ffcc';
  const glow = 'rgba(160, 184, 255, .65)';
  const gridStroke = 'rgba(200, 210, 235, .08)';

  return (
    <motion.div
      className={`emotion-monitor ${className}`}
      initial={{ opacity: 0, y: -6 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -6 }}
      transition={{ duration: .28 }}
      style={{
        position: 'fixed',
        top: 20, left: 20, width: 340,
        background: 'linear-gradient(180deg, rgba(18,24,33,.96), rgba(11,15,20,.96))',
        border: '1px solid rgba(215,225,245,.12)',
        borderRadius: 16,
        padding: 16,
        zIndex: 1000,
        boxShadow: '0 10px 40px rgba(0,0,0,.45)',
        overflow: 'hidden',
        WebkitBackdropFilter: 'blur(18px)', backdropFilter: 'blur(18px)'
      }}
    >

      {/* —— 霓虹框 + 扫描线 + 网格（纯装饰，零逻辑） */}
      <div style={{
        position:'absolute', inset:0, pointerEvents:'none',
        background:
          'radial-gradient(1200px 600px at -10% -10%, rgba(160,184,255,.12), transparent 60%),' + 
          'radial-gradient(900px 500px at 120% 110%, rgba(160,184,255,.08), transparent 60%)'
      }}/>
      <div style={{
        position:'absolute', inset:0, pointerEvents:'none',
        backgroundImage:
          `linear-gradient(${gridStroke} 1px, transparent 1px), linear-gradient(90deg, ${gridStroke} 1px, transparent 1px)`,
        backgroundSize: '32px 32px, 32px 32px',
        maskImage: 'linear-gradient(to bottom, rgba(0,0,0,.6), rgba(0,0,0,.15))'
      }}/>
      <div style={{
        position:'absolute', inset:0, pointerEvents:'none',
        background: 'repeating-linear-gradient(180deg, rgba(255,255,255,.06) 0 1px, transparent 1px 4px)',
        opacity:.08, transform:'translateY(0)',
        animation: 'scan 6s linear infinite'
      }}/>

      {/* —— 顶栏 */}
      <div style={{display:'flex', alignItems:'center', justifyContent:'space-between', marginBottom:12}}>
        <div style={{display:'flex',alignItems:'center', gap:10}}>
          <div style={{
            width:10,height:10,borderRadius:'50%',
            boxShadow:`0 0 12px ${glow}, 0 0 28px ${glow}`,
            background: accent
          }}/>
          <div style={{fontFamily:'ui-monospace, SFMono-Regular, Menlo', fontSize:14, color:'#eaf0ff'}}>
            AI Emotion Console
          </div>
        </div>
        <div style={{display:'flex', alignItems:'center', gap:8}}>
          <Badge label={`BPM ${bpm}`} />
          <Badge label={preset} variant="ghost" />
          <Counter n={updateCount} />
        </div>
      </div>

      {/* —— 指标块 */}
      <Row>
        <Gauge label="能量" value={sEnergy} color="linear-gradient(90deg, #7affd1, rgba(122,255,209,.25))" />
        <Gauge label="效价" value={sValence} mapValence />
        <Gauge label="唤醒" value={sArousal} color="linear-gradient(90deg, #ff84e2, rgba(255,132,226,.25))" />
      </Row>

      {/* —— 迷你曲线（能量/唤醒） */}
      <div style={{marginTop:12, border:'1px solid rgba(215,225,245,.12)', borderRadius:10, padding:8}}>
        <div style={{display:'flex', justifyContent:'space-between', color:'rgba(235,242,255,.66)', fontSize:10, marginBottom:6}}>
          <span>实时趋势</span>
          <span style={{opacity:.65}}>last {HISTORY}</span>
        </div>
        <svg width="100%" height="56" viewBox="0 0 288 46" preserveAspectRatio="none" style={{display:'block'}}>
          <polyline
            points={energyPath}
            fill="none"
            stroke="url(#gradEnergy)"
            strokeWidth="2"
            strokeLinejoin="round"
            strokeLinecap="round"
          />
          <polyline
            points={arousalPath}
            fill="none"
            stroke="url(#gradArousal)"
            strokeWidth="1.5"
            strokeLinejoin="round"
            strokeLinecap="round"
            opacity=".9"
          />
          <defs>
            <linearGradient id="gradEnergy" x1="0" y1="0" x2="1" y2="0">
              <stop offset="0%" stopColor="#7affd1"/>
              <stop offset="100%" stopColor="rgba(122,255,209,.25)"/>
            </linearGradient>
            <linearGradient id="gradArousal" x1="0" y1="0" x2="1" y2="0">
              <stop offset="0%" stopColor="#a0b8ff"/>
              <stop offset="100%" stopColor="rgba(160,184,255,.25)"/>
            </linearGradient>
          </defs>
        </svg>
      </div>

      {/* —— 派生视觉指标 + 时间 */}
      <Row style={{marginTop:10}}>
        <Kpi label="强度" value={emotionData.intensity}/>
        <Kpi label="运动" value={emotionData.motion}/>
        <Kpi label="对比" value={emotionData.contrast}/>
        <Kpi label="时间" text={new Date(emotionData.timestamp).toLocaleTimeString()}/>
      </Row>

      {/* —— 关闭按钮 */}
      {onToggleVisibility && (
        <button
          onClick={onToggleVisibility}
          style={{
            position:'absolute', top:10, right:10,
            background:'rgba(255,255,255,.08)',
            border:'1px solid rgba(215,225,245,.18)',
            color:'rgba(240,245,255,.8)',
            fontSize:12, padding:'4px 8px', borderRadius:8, cursor:'pointer'
          }}
        >
          隐藏
        </button>
      )}

      {/* —— 局部样式 */}
      <style jsx>{`
        @keyframes scan { 0% { transform: translateY(-20%); } 100% { transform: translateY(20%); } }
      `}</style>
    </motion.div>
  );
};

/* ====== 子组件与工具 ====== */

const Row: React.FC<React.PropsWithChildren<{style?: React.CSSProperties}>> = ({children, style}) => (
  <div style={{display:'grid', gridTemplateColumns:'1fr 1fr 1fr', gap:10, ...style}}>{children}</div>
);

// 条形仪表
const Gauge: React.FC<{
  label: string;
  value: any;               // MotionValue<number>
  color?: string;
  mapValence?: boolean;     // valence -1..1 → 映射到 0..1
}> = ({ label, value, color = 'linear-gradient(90deg, #a0b8ff, rgba(160,184,255,.25))', mapValence }) => {
  const [v, setV] = useState(0.5);
  useEffect(() => {
    const unsub = value.on('change', (x: number) => {
      const e = mapValence ? clamp01((x + 1) / 2) : clamp01(x);
      setV(e);
    });
    return () => unsub?.();
  }, [value, mapValence]);

  return (
    <div style={{border:'1px solid rgba(215,225,245,.12)', borderRadius:10, padding:10}}>
      <div style={{display:'flex', justifyContent:'space-between', marginBottom:6}}>
        <span style={{fontSize:11, color:'rgba(240,245,255,.75)'}}>{label}</span>
        <span style={{fontSize:12, fontWeight:700, color:'#eaf0ff'}}>{v.toFixed(3)}</span>
      </div>
      <div style={{height:8, background:'rgba(255,255,255,.08)', borderRadius:4, overflow:'hidden'}}>
        <motion.div
          style={{
            height:'100%',
            width:`${v*100}%`,
            background: color,
            boxShadow:'0 0 12px rgba(160,184,255,.35) inset'
          }}
          transition={{ duration:.35, ease:'easeOut' }}
        />
      </div>
    </div>
  );
};

// 角标
const Badge: React.FC<{label:string; variant?:'solid'|'ghost'}> = ({label, variant='solid'}) => (
  <div style={{
    fontFamily:'ui-monospace, SFMono-Regular, Menlo',
    fontSize:10, padding:'4px 8px', borderRadius:8,
    color: variant==='solid' ? '#0b0f14' : '#eaf0ff',
    background: variant==='solid' ? '#a0b8ff' : 'rgba(160,184,255,.12)',
    border:'1px solid rgba(160,184,255,.35)',
    textTransform:'uppercase', letterSpacing:'0.6px'
  }}>{label}</div>
);

// 小 KPI 卡
const Kpi: React.FC<{label:string; value?:number; text?:string}> = ({label, value, text}) => (
  <div style={{
    border:'1px solid rgba(215,225,245,.12)', borderRadius:10, padding:'8px 10px',
    background:'rgba(255,255,255,.04)'
  }}>
    <div style={{fontSize:10, color:'rgba(235,242,255,.6)'}}>{label}</div>
    <div style={{fontSize:14, fontWeight:700, color:'#eaf0ff', marginTop:2}}>
      {typeof value === 'number' ? value.toFixed(3) : text}
    </div>
  </div>
);

/* 工具函数 */
function clamp01(x: number){ return Math.max(0, Math.min(1, x)); }
function clampRange(x: number, lo: number, hi: number){ return Math.max(lo, Math.min(hi, x)); }

export default EmotionMonitor;
```

### 升级点速览

* 霓虹/扫描线/网格/光晕：太空银主题更“AI 控制台”，但全部是**装饰层**，不阻塞逻辑。
* **弹簧缓动**：energy/valence/arousal 由 `motion` 的 `useSpring` 软化，读数和进度条更丝滑。
* **实时曲线**：SVG `polyline` + 环形缓冲，**单一 RAF** 推进，极低开销；显示能量与唤醒趋势。
* **BPM 与预设徽章**：自动监听 `bpm:update` 与 `visualization:preset`。
* **稳定 & 低耦合**：继续只读事件，**不控制音频**；所有外观走内联样式（不侵入你的全局 CSS）。

想要我把它封装成一个**可折叠底部抽屉**版本（“SYNC 触发从底边弹出”的交互）并接入你 `UnifiedEventBus` 的 `ui:sync_toggle` 吗？我可以再给一版 Dock 模式的壳子，和你的电台播放器一起联动。


